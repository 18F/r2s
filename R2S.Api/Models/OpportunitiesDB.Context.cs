//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace R2S.Api.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Advertisement_PortalEntities : DbContext
    {
        public Advertisement_PortalEntities()
            : base("name=Advertisement_PortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AuditGetRequirement> AuditGetRequirements { get; set; }
        public virtual DbSet<CandidateInfo> CandidateInfoes { get; set; }
        public virtual DbSet<ConusOconu> ConusOconus { get; set; }
        public virtual DbSet<DutyInfo> DutyInfoes { get; set; }
        public virtual DbSet<MissionInfo> MissionInfoes { get; set; }
        public virtual DbSet<NROWS_AD_FLEET_EXERCISE> NROWS_AD_FLEET_EXERCISE { get; set; }
        public virtual DbSet<NROWS_AD_LK_ADSW_AT_TYPES> NROWS_AD_LK_ADSW_AT_TYPES { get; set; }
        public virtual DbSet<NROWS_AD_LK_ORDER_TYPE> NROWS_AD_LK_ORDER_TYPE { get; set; }
        public virtual DbSet<NROWS_AD_LK_TYPE_SECURITY> NROWS_AD_LK_TYPE_SECURITY { get; set; }
        public virtual DbSet<NROWS_AD_MISSION> NROWS_AD_MISSION { get; set; }
        public virtual DbSet<NROWS_AD_REQUIREMENT_OWNER> NROWS_AD_REQUIREMENT_OWNER { get; set; }
        public virtual DbSet<OperationEventExercise> OperationEventExercises { get; set; }
        public virtual DbSet<OrderSubType> OrderSubTypes { get; set; }
        public virtual DbSet<OrderType> OrderTypes { get; set; }
        public virtual DbSet<ReportingInfo> ReportingInfoes { get; set; }
        public virtual DbSet<RequirementInfo> RequirementInfoes { get; set; }
        public virtual DbSet<RequirementOwner> RequirementOwners { get; set; }
        public virtual DbSet<RequirementState> RequirementStates { get; set; }
        public virtual DbSet<SecurityClearanceType> SecurityClearanceTypes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<YesNo> YesNoes { get; set; }
        public virtual DbSet<DAILY_DELTA> DAILY_DELTA { get; set; }
        public virtual DbSet<All_View> All_View { get; set; }
        public virtual DbSet<DD_View> DD_View { get; set; }
    
        public virtual int DeleteRequirement(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRequirement", iDParameter);
        }
    
        public virtual ObjectResult<GetDailyDelta_Result> GetDailyDelta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyDelta_Result>("GetDailyDelta");
        }
    
        public virtual ObjectResult<GetRequirementByID_Result> GetRequirementByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRequirementByID_Result>("GetRequirementByID", iDParameter);
        }
    
        public virtual ObjectResult<GetRequirementByRequirementID_Result> GetRequirementByRequirementID(Nullable<int> advertisementId)
        {
            var advertisementIdParameter = advertisementId.HasValue ?
                new ObjectParameter("AdvertisementId", advertisementId) :
                new ObjectParameter("AdvertisementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRequirementByRequirementID_Result>("GetRequirementByRequirementID", advertisementIdParameter);
        }
    
        public virtual ObjectResult<GetRequirements_Result> GetRequirements(string advertisementID, string nROWSRequirementID, string designator, string rating, string nOBC, string nEC, string missionName, string requirementName, string orderType, string minRank, Nullable<int> iD)
        {
            var advertisementIDParameter = advertisementID != null ?
                new ObjectParameter("AdvertisementID", advertisementID) :
                new ObjectParameter("AdvertisementID", typeof(string));
    
            var nROWSRequirementIDParameter = nROWSRequirementID != null ?
                new ObjectParameter("NROWSRequirementID", nROWSRequirementID) :
                new ObjectParameter("NROWSRequirementID", typeof(string));
    
            var designatorParameter = designator != null ?
                new ObjectParameter("Designator", designator) :
                new ObjectParameter("Designator", typeof(string));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(string));
    
            var nOBCParameter = nOBC != null ?
                new ObjectParameter("NOBC", nOBC) :
                new ObjectParameter("NOBC", typeof(string));
    
            var nECParameter = nEC != null ?
                new ObjectParameter("NEC", nEC) :
                new ObjectParameter("NEC", typeof(string));
    
            var missionNameParameter = missionName != null ?
                new ObjectParameter("MissionName", missionName) :
                new ObjectParameter("MissionName", typeof(string));
    
            var requirementNameParameter = requirementName != null ?
                new ObjectParameter("RequirementName", requirementName) :
                new ObjectParameter("RequirementName", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var minRankParameter = minRank != null ?
                new ObjectParameter("MinRank", minRank) :
                new ObjectParameter("MinRank", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRequirements_Result>("GetRequirements", advertisementIDParameter, nROWSRequirementIDParameter, designatorParameter, ratingParameter, nOBCParameter, nECParameter, missionNameParameter, requirementNameParameter, orderTypeParameter, minRankParameter, iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertRequirement(string minimumRank, string maximumRank, string designator, string aQD, string nOBC, string rating, string nEC, string qualifications, string securityClearanceTypeID, Nullable<short> securityClearanceRequiredID, string gender, Nullable<short> pCS, Nullable<short> dutyAfloatID, string orderSubTypeID, string orderTypeID, string missionName, Nullable<System.DateTime> missionReportDate, Nullable<System.DateTime> missionEndDate, string uIC, string uICName, Nullable<short> conusOconusID, string city, string state, string zipcode, string country, string requirementName, string operationExerciseEventID, Nullable<System.DateTime> reportDate, Nullable<System.DateTime> endDate, Nullable<short> totalDays, Nullable<short> requirementStateID, string comments, Nullable<short> numberofOfficers, Nullable<short> numberofEnlisted, string pocOrganization, string pocEmail, string pocPhone, string pocName, string nROWSRequirementID, Nullable<short> nROWSIDAvailable, string source, string rankSwitch, ObjectParameter iD)
        {
            var minimumRankParameter = minimumRank != null ?
                new ObjectParameter("MinimumRank", minimumRank) :
                new ObjectParameter("MinimumRank", typeof(string));
    
            var maximumRankParameter = maximumRank != null ?
                new ObjectParameter("MaximumRank", maximumRank) :
                new ObjectParameter("MaximumRank", typeof(string));
    
            var designatorParameter = designator != null ?
                new ObjectParameter("Designator", designator) :
                new ObjectParameter("Designator", typeof(string));
    
            var aQDParameter = aQD != null ?
                new ObjectParameter("AQD", aQD) :
                new ObjectParameter("AQD", typeof(string));
    
            var nOBCParameter = nOBC != null ?
                new ObjectParameter("NOBC", nOBC) :
                new ObjectParameter("NOBC", typeof(string));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(string));
    
            var nECParameter = nEC != null ?
                new ObjectParameter("NEC", nEC) :
                new ObjectParameter("NEC", typeof(string));
    
            var qualificationsParameter = qualifications != null ?
                new ObjectParameter("Qualifications", qualifications) :
                new ObjectParameter("Qualifications", typeof(string));
    
            var securityClearanceTypeIDParameter = securityClearanceTypeID != null ?
                new ObjectParameter("SecurityClearanceTypeID", securityClearanceTypeID) :
                new ObjectParameter("SecurityClearanceTypeID", typeof(string));
    
            var securityClearanceRequiredIDParameter = securityClearanceRequiredID.HasValue ?
                new ObjectParameter("SecurityClearanceRequiredID", securityClearanceRequiredID) :
                new ObjectParameter("SecurityClearanceRequiredID", typeof(short));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var pCSParameter = pCS.HasValue ?
                new ObjectParameter("PCS", pCS) :
                new ObjectParameter("PCS", typeof(short));
    
            var dutyAfloatIDParameter = dutyAfloatID.HasValue ?
                new ObjectParameter("DutyAfloatID", dutyAfloatID) :
                new ObjectParameter("DutyAfloatID", typeof(short));
    
            var orderSubTypeIDParameter = orderSubTypeID != null ?
                new ObjectParameter("OrderSubTypeID", orderSubTypeID) :
                new ObjectParameter("OrderSubTypeID", typeof(string));
    
            var orderTypeIDParameter = orderTypeID != null ?
                new ObjectParameter("OrderTypeID", orderTypeID) :
                new ObjectParameter("OrderTypeID", typeof(string));
    
            var missionNameParameter = missionName != null ?
                new ObjectParameter("MissionName", missionName) :
                new ObjectParameter("MissionName", typeof(string));
    
            var missionReportDateParameter = missionReportDate.HasValue ?
                new ObjectParameter("MissionReportDate", missionReportDate) :
                new ObjectParameter("MissionReportDate", typeof(System.DateTime));
    
            var missionEndDateParameter = missionEndDate.HasValue ?
                new ObjectParameter("MissionEndDate", missionEndDate) :
                new ObjectParameter("MissionEndDate", typeof(System.DateTime));
    
            var uICParameter = uIC != null ?
                new ObjectParameter("UIC", uIC) :
                new ObjectParameter("UIC", typeof(string));
    
            var uICNameParameter = uICName != null ?
                new ObjectParameter("UICName", uICName) :
                new ObjectParameter("UICName", typeof(string));
    
            var conusOconusIDParameter = conusOconusID.HasValue ?
                new ObjectParameter("ConusOconusID", conusOconusID) :
                new ObjectParameter("ConusOconusID", typeof(short));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var requirementNameParameter = requirementName != null ?
                new ObjectParameter("RequirementName", requirementName) :
                new ObjectParameter("RequirementName", typeof(string));
    
            var operationExerciseEventIDParameter = operationExerciseEventID != null ?
                new ObjectParameter("OperationExerciseEventID", operationExerciseEventID) :
                new ObjectParameter("OperationExerciseEventID", typeof(string));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var totalDaysParameter = totalDays.HasValue ?
                new ObjectParameter("TotalDays", totalDays) :
                new ObjectParameter("TotalDays", typeof(short));
    
            var requirementStateIDParameter = requirementStateID.HasValue ?
                new ObjectParameter("RequirementStateID", requirementStateID) :
                new ObjectParameter("RequirementStateID", typeof(short));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var numberofOfficersParameter = numberofOfficers.HasValue ?
                new ObjectParameter("NumberofOfficers", numberofOfficers) :
                new ObjectParameter("NumberofOfficers", typeof(short));
    
            var numberofEnlistedParameter = numberofEnlisted.HasValue ?
                new ObjectParameter("NumberofEnlisted", numberofEnlisted) :
                new ObjectParameter("NumberofEnlisted", typeof(short));
    
            var pocOrganizationParameter = pocOrganization != null ?
                new ObjectParameter("PocOrganization", pocOrganization) :
                new ObjectParameter("PocOrganization", typeof(string));
    
            var pocEmailParameter = pocEmail != null ?
                new ObjectParameter("PocEmail", pocEmail) :
                new ObjectParameter("PocEmail", typeof(string));
    
            var pocPhoneParameter = pocPhone != null ?
                new ObjectParameter("PocPhone", pocPhone) :
                new ObjectParameter("PocPhone", typeof(string));
    
            var pocNameParameter = pocName != null ?
                new ObjectParameter("PocName", pocName) :
                new ObjectParameter("PocName", typeof(string));
    
            var nROWSRequirementIDParameter = nROWSRequirementID != null ?
                new ObjectParameter("NROWSRequirementID", nROWSRequirementID) :
                new ObjectParameter("NROWSRequirementID", typeof(string));
    
            var nROWSIDAvailableParameter = nROWSIDAvailable.HasValue ?
                new ObjectParameter("NROWSIDAvailable", nROWSIDAvailable) :
                new ObjectParameter("NROWSIDAvailable", typeof(short));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var rankSwitchParameter = rankSwitch != null ?
                new ObjectParameter("RankSwitch", rankSwitch) :
                new ObjectParameter("RankSwitch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertRequirement", minimumRankParameter, maximumRankParameter, designatorParameter, aQDParameter, nOBCParameter, ratingParameter, nECParameter, qualificationsParameter, securityClearanceTypeIDParameter, securityClearanceRequiredIDParameter, genderParameter, pCSParameter, dutyAfloatIDParameter, orderSubTypeIDParameter, orderTypeIDParameter, missionNameParameter, missionReportDateParameter, missionEndDateParameter, uICParameter, uICNameParameter, conusOconusIDParameter, cityParameter, stateParameter, zipcodeParameter, countryParameter, requirementNameParameter, operationExerciseEventIDParameter, reportDateParameter, endDateParameter, totalDaysParameter, requirementStateIDParameter, commentsParameter, numberofOfficersParameter, numberofEnlistedParameter, pocOrganizationParameter, pocEmailParameter, pocPhoneParameter, pocNameParameter, nROWSRequirementIDParameter, nROWSIDAvailableParameter, sourceParameter, rankSwitchParameter, iD);
        }
    
        public virtual ObjectResult<Nullable<int>> RHS_Merge_Data()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RHS_Merge_Data");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_Daily_Delta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Daily_Delta");
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_Import_From_RHS_Global()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Import_From_RHS_Global");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateRequirement(string minimumRank, string maximumRank, string designator, string aQD, string nOBC, string rating, string nEC, string qualifications, string securityClearanceTypeID, Nullable<short> securityClearanceRequiredID, string gender, Nullable<short> pCS, Nullable<short> dutyAfloatID, string orderSubTypeID, string orderTypeID, string missionName, Nullable<System.DateTime> missionReportDate, Nullable<System.DateTime> missionEndDate, string uIC, string uICName, Nullable<short> conusOconusID, string city, string state, string zipcode, string country, Nullable<int> iD, string requirementName, string operationExerciseEventID, Nullable<System.DateTime> reportDate, Nullable<System.DateTime> endDate, Nullable<short> totalDays, Nullable<short> requirementStateID, string comments, Nullable<short> numberofOfficers, Nullable<short> numberofEnlisted, string pocOrganization, string pocEmail, string pocPhone, string pocName, Nullable<short> nROWSIDAvailable, string nROWSRequirementID, string source, string rankSwitch)
        {
            var minimumRankParameter = minimumRank != null ?
                new ObjectParameter("MinimumRank", minimumRank) :
                new ObjectParameter("MinimumRank", typeof(string));
    
            var maximumRankParameter = maximumRank != null ?
                new ObjectParameter("MaximumRank", maximumRank) :
                new ObjectParameter("MaximumRank", typeof(string));
    
            var designatorParameter = designator != null ?
                new ObjectParameter("Designator", designator) :
                new ObjectParameter("Designator", typeof(string));
    
            var aQDParameter = aQD != null ?
                new ObjectParameter("AQD", aQD) :
                new ObjectParameter("AQD", typeof(string));
    
            var nOBCParameter = nOBC != null ?
                new ObjectParameter("NOBC", nOBC) :
                new ObjectParameter("NOBC", typeof(string));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(string));
    
            var nECParameter = nEC != null ?
                new ObjectParameter("NEC", nEC) :
                new ObjectParameter("NEC", typeof(string));
    
            var qualificationsParameter = qualifications != null ?
                new ObjectParameter("Qualifications", qualifications) :
                new ObjectParameter("Qualifications", typeof(string));
    
            var securityClearanceTypeIDParameter = securityClearanceTypeID != null ?
                new ObjectParameter("SecurityClearanceTypeID", securityClearanceTypeID) :
                new ObjectParameter("SecurityClearanceTypeID", typeof(string));
    
            var securityClearanceRequiredIDParameter = securityClearanceRequiredID.HasValue ?
                new ObjectParameter("SecurityClearanceRequiredID", securityClearanceRequiredID) :
                new ObjectParameter("SecurityClearanceRequiredID", typeof(short));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var pCSParameter = pCS.HasValue ?
                new ObjectParameter("PCS", pCS) :
                new ObjectParameter("PCS", typeof(short));
    
            var dutyAfloatIDParameter = dutyAfloatID.HasValue ?
                new ObjectParameter("DutyAfloatID", dutyAfloatID) :
                new ObjectParameter("DutyAfloatID", typeof(short));
    
            var orderSubTypeIDParameter = orderSubTypeID != null ?
                new ObjectParameter("OrderSubTypeID", orderSubTypeID) :
                new ObjectParameter("OrderSubTypeID", typeof(string));
    
            var orderTypeIDParameter = orderTypeID != null ?
                new ObjectParameter("OrderTypeID", orderTypeID) :
                new ObjectParameter("OrderTypeID", typeof(string));
    
            var missionNameParameter = missionName != null ?
                new ObjectParameter("MissionName", missionName) :
                new ObjectParameter("MissionName", typeof(string));
    
            var missionReportDateParameter = missionReportDate.HasValue ?
                new ObjectParameter("MissionReportDate", missionReportDate) :
                new ObjectParameter("MissionReportDate", typeof(System.DateTime));
    
            var missionEndDateParameter = missionEndDate.HasValue ?
                new ObjectParameter("MissionEndDate", missionEndDate) :
                new ObjectParameter("MissionEndDate", typeof(System.DateTime));
    
            var uICParameter = uIC != null ?
                new ObjectParameter("UIC", uIC) :
                new ObjectParameter("UIC", typeof(string));
    
            var uICNameParameter = uICName != null ?
                new ObjectParameter("UICName", uICName) :
                new ObjectParameter("UICName", typeof(string));
    
            var conusOconusIDParameter = conusOconusID.HasValue ?
                new ObjectParameter("ConusOconusID", conusOconusID) :
                new ObjectParameter("ConusOconusID", typeof(short));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var requirementNameParameter = requirementName != null ?
                new ObjectParameter("RequirementName", requirementName) :
                new ObjectParameter("RequirementName", typeof(string));
    
            var operationExerciseEventIDParameter = operationExerciseEventID != null ?
                new ObjectParameter("OperationExerciseEventID", operationExerciseEventID) :
                new ObjectParameter("OperationExerciseEventID", typeof(string));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var totalDaysParameter = totalDays.HasValue ?
                new ObjectParameter("TotalDays", totalDays) :
                new ObjectParameter("TotalDays", typeof(short));
    
            var requirementStateIDParameter = requirementStateID.HasValue ?
                new ObjectParameter("RequirementStateID", requirementStateID) :
                new ObjectParameter("RequirementStateID", typeof(short));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var numberofOfficersParameter = numberofOfficers.HasValue ?
                new ObjectParameter("NumberofOfficers", numberofOfficers) :
                new ObjectParameter("NumberofOfficers", typeof(short));
    
            var numberofEnlistedParameter = numberofEnlisted.HasValue ?
                new ObjectParameter("NumberofEnlisted", numberofEnlisted) :
                new ObjectParameter("NumberofEnlisted", typeof(short));
    
            var pocOrganizationParameter = pocOrganization != null ?
                new ObjectParameter("PocOrganization", pocOrganization) :
                new ObjectParameter("PocOrganization", typeof(string));
    
            var pocEmailParameter = pocEmail != null ?
                new ObjectParameter("PocEmail", pocEmail) :
                new ObjectParameter("PocEmail", typeof(string));
    
            var pocPhoneParameter = pocPhone != null ?
                new ObjectParameter("PocPhone", pocPhone) :
                new ObjectParameter("PocPhone", typeof(string));
    
            var pocNameParameter = pocName != null ?
                new ObjectParameter("PocName", pocName) :
                new ObjectParameter("PocName", typeof(string));
    
            var nROWSIDAvailableParameter = nROWSIDAvailable.HasValue ?
                new ObjectParameter("NROWSIDAvailable", nROWSIDAvailable) :
                new ObjectParameter("NROWSIDAvailable", typeof(short));
    
            var nROWSRequirementIDParameter = nROWSRequirementID != null ?
                new ObjectParameter("NROWSRequirementID", nROWSRequirementID) :
                new ObjectParameter("NROWSRequirementID", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var rankSwitchParameter = rankSwitch != null ?
                new ObjectParameter("RankSwitch", rankSwitch) :
                new ObjectParameter("RankSwitch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRequirement", minimumRankParameter, maximumRankParameter, designatorParameter, aQDParameter, nOBCParameter, ratingParameter, nECParameter, qualificationsParameter, securityClearanceTypeIDParameter, securityClearanceRequiredIDParameter, genderParameter, pCSParameter, dutyAfloatIDParameter, orderSubTypeIDParameter, orderTypeIDParameter, missionNameParameter, missionReportDateParameter, missionEndDateParameter, uICParameter, uICNameParameter, conusOconusIDParameter, cityParameter, stateParameter, zipcodeParameter, countryParameter, iDParameter, requirementNameParameter, operationExerciseEventIDParameter, reportDateParameter, endDateParameter, totalDaysParameter, requirementStateIDParameter, commentsParameter, numberofOfficersParameter, numberofEnlistedParameter, pocOrganizationParameter, pocEmailParameter, pocPhoneParameter, pocNameParameter, nROWSIDAvailableParameter, nROWSRequirementIDParameter, sourceParameter, rankSwitchParameter);
        }
    }
}
